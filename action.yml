name: 'WIPAC Dev Py Setup'
description: 'GitHub Action Package for Automating Python-Package Setup'

inputs:
  base-keywords:  # id of input
    description: 'A list of keywords to add to metadata'
    required: false
    default: ''
  directory-exclude:  # id of input
    description: 'A list of directories to exclude from release'
    required: false
    default: 'test tests doc docs resource resources example examples'
  license:  # id of input
    description: "The repo's license type"
    required: false
    default: 'MIT'
  git_committer_name:
    description: 'The name used for "git config user.name"'
    required: false
    default: github-actions
  git_committer_email:
    description: 'The email used for "git config user.email"'
    required: false
    default: github-actions@github.com
  docker_image:
    description: "a docker image to generate the dependencies.log file(s) within"
    required: false
    default: ''

# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # NOTE: update, someday. Also tests.yml

    - name: Git config
      run: |
        git config user.name ${{ inputs.git_committer_name }}
        git config user.email ${{ inputs.git_committer_email }}
      shell: bash

    - name: Build setup.cfg + README.md (and commit)
      run: |
        pip3 install -r ${{ github.action_path }}/requirements.txt
        pip3 install wipac-dev-tools
        echo $GITHUB_REPOSITORY
        echo "setup.cfg (+ README.md)"
        # since GHA injects raw string, must use EOF to avoid quote-mangling
        HEAD_COMMIT_MESSAGE=$(cat <<EOF
        ${{ github.event.head_commit.message }}
        EOF
        )
        # Build!
        python3 ${{ github.action_path }}/setup_builder.py \
          setup.cfg \
          $GITHUB_REPOSITORY \
          --base-keywords ${{ inputs.base-keywords }} \
          --directory-exclude ${{ inputs.directory-exclude }} \
          --license ${{ inputs.license }} \
          --token ${{ github.token }} \
          --commit-message "$HEAD_COMMIT_MESSAGE"
        cat setup.cfg
        # Commits
        git add setup.cfg
        git commit -m "<bot> update setup.cfg" || true
        git add README.md || true
        git commit -m "<bot> update README.md" || true
      shell: bash

    - name: Add py.typed file(s) (and commit)
      run: |
        python -c '
        import os
        from pathlib import Path

        line_to_parse = ""
        with open("setup.cfg") as f:
          for line in f.readlines():
            if line.startswith("version_variable = "):
              line_to_parse = line.strip()  # remove newline
        if not line_to_parse:
          raise Exception("Cannot addd py.typed files (missing version_variable in setup.cfg)")

        for version_path in line_to_parse.removeprefix("version_variable = ").split(","):
          print(version_path)
          dpath = version_path.removesuffix("__init__.py:__version__")
          print(dpath)
          fpath = Path(dpath) / "py.typed"
          print(fpath)
          fpath.touch()  # create if needed!
        '
        git add .  # won't error if nothing to add
        git commit -m "<bot> add py.typed file(s)" || true

      shell: bash

    - name: Build dependencies.log (and commit)
      run: |
        # append permissive line to .gitignore since *.log is commonly present
        line='!dependencies*.log'
        if [[ ! $(grep -F "$line" .gitignore) ]]; then
          echo "" >> .gitignore
          echo "# wipac-dev-py-setup-action" >> .gitignore
          echo "$line" >> .gitignore
          git add .gitignore
          git commit -m "<bot> update .gitignore" || true  # fails if no change
          tail .gitignore
        fi

        # Build
        if [ ! -z "${{ inputs.docker_image }}" ]; then
          # from docker...
          mkdir ./dep-build
          DOCKER_DEPS="dependencies-from-docker.log"
          echo "pip3 freeze > /local/dep-build/$DOCKER_DEPS" > ./dep-build/freezer.sh
          chmod +x ./dep-build/freezer.sh
          docker run --rm -i \
            --mount type=bind,source=$(realpath ./dep-build/),target=/local/dep-build \
            ${{ inputs.docker_image }} \
            /local/dep-build/freezer.sh
          cat ./dep-build/$DOCKER_DEPS
          mv ./dep-build/$DOCKER_DEPS $DOCKER_DEPS
          rm -r ./dep-build/
          git check-ignore -v $DOCKER_DEPS
          git add $DOCKER_DEPS
          git commit -m "<bot> update ${DOCKER_DEPS}" || true  # fails if no change
        else
          # from setup.cfg...
          export GITHUB_ACTION_PATH=${{ github.action_path }}
          ${{ github.action_path }}/build-dependencies-logs.sh
        fi

      shell: bash

    - name: Push changes
      run: |
        status=`git status 2>&1 | tee`
        ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
        if [ "$ahead" -eq "1" ]; then
          echo "no changes needed"
          exit 0
        fi
        git push
        echo "changes pushed (rest of workflow canceled)"
        exit 1  # prevent dependent job(s) since there's changes to the code
      shell: bash
