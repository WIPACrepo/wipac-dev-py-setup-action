name: 'WIPAC Dev Py Setup'
description: 'GitHub Action Package for Automating Python-Package Setup'

inputs:
  # REQUIRED
  python_min:
    description: 'Minimum required Python version'
    required: true  # needs to be explicitly checked
  # OPTIONAL (python)
  python_max:
    description: 'Maximum supported Python version. If not provided, the most recent Python version will be used.'
    required: false
    default: ''
  # OPTIONAL (packaging)
  package_dirs:
    description: "Space-separated list of directories to release. If not provided, all packages in the repository's root directory will be used."
    required: false
    default: ''
  exclude_dirs:
    description: "Space-separated list of directories to exclude from release, relative to the repository's root directory."
    required: false
    default: 'test tests doc docs resource resources example examples'
  # OPTIONAL (releases)
  pypi_name:
    description: 'Name of the PyPI package'
    required: false
    default: ''
  patch_without_tag:
    description: 'Whether to make a patch release even if the commit message does not explicitly warrant one'
    required: false
    default: 'True'
  # OPTIONAL (meta)
  keywords:
    description: 'Space-separated list of keywords'
    required: false
    default: ''
  author:
    description: 'Author of the package (required if the package is intended to be hosted on PyPI)'
    required: false
    default: ''
  author_email:
    description: 'Email of the package author (required if the package is intended to be hosted on PyPI)'
    required: false
    default: ''
  # OPTIONAL (git)
  git_committer_name:
    description: 'Name used for "git config user.name"'
    required: false
    default: github-actions
  git_committer_email:
    description: 'Email used for "git config user.email"'
    required: false
    default: github-actions@github.com

# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}

runs:
  using: "composite"
  steps:
    - name: check required inputs
      run: |
        if [ -z "${{ inputs.python_min }}" ]; then
          echo "required input not provided: python_min"
          exit 1
        fi
      shell: bash

    - uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # NOTE: update, someday.

    - name: Is this most recent commit? It won't be if action was reran
      run: |
        git fetch &> /dev/null
        if [[ $(git status -sb | grep behind) ]]; then
          echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
          echo "this commit is not most recent on this branch -- rest of action will be skipped"
        fi
      shell: bash

    - name: Git config
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        git config user.name ${{ inputs.git_committer_name }}
        git config user.email ${{ inputs.git_committer_email }}
      shell: bash

    - name: Check pyproject.toml for project migration
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # if needed: auto-create a minimal pyproject.toml
        if [[ ! -f pyproject.toml ]]; then
            touch pyproject.toml
            # TODO: update logic when https://github.com/WIPACrepo/wipac-dev-py-setup-action/issues/62
            # add required fields
            echo "# WIPACrepo/wipac-dev-py-setup-action@v4+ Migration Helper:" >> pyproject.toml
            echo "" >> pyproject.toml
            echo "# set these fields:" >> pyproject.toml
            echo "[project]" >> pyproject.toml
            echo "version = \"0.0.0\"" >> pyproject.toml
            # add most likely needed fields
            echo "dependencies = []  # leave empty if there are no dependencies" >> pyproject.toml
            echo "" >> pyproject.toml
            echo "# optional sections:" >> pyproject.toml
            echo "" >> pyproject.toml
            echo "# [project.optional-dependencies]" >> pyproject.toml
            echo "# foo = []" >> pyproject.toml
            echo "# bar = []" >> pyproject.toml
            # commit, push, exit
            msg="added pyproject.toml -- user needs to set values for auto-added fields"
            git add .
            git commit -m "<bot> $msg"
            git push
            echo $msg
            echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
        fi
        # no setup.cfg allowed!
        if [[ -f setup.cfg ]]; then
            echo " "
            echo "WIPACrepo/wipac-dev-py-setup-action no longer supports 'setup.cfg'"
            echo "Migration Steps:"
            echo "  1. Look at 'pyproject.toml'--this action may have auto-added fields."
            echo "     Fill out any needed values."
            echo "  2. Manually move attributes from setup.cfg's [wipac:cicd_setup_builder]"
            echo "     section to WIPACrepo/wipac-dev-py-setup-action's 'with' block."
            echo "     See https://github.com/WIPACrepo/wipac-dev-py-setup-action#inputs."
            echo "  3. Migrate any non-autogenerated configuration to 'pyproject.toml'."
            echo "  4. Delete 'setup.cfg'."
            echo "  5. If used, update WIPACrepo/wipac-dev-py-versions-action to most"
            echo "     recent version."
            echo "     See https://github.com/WIPACrepo/wipac-dev-py-versions-action."
            echo "  6. Push these changes!"
            exit 1
        fi
      shell: bash


    - name: Prepare Keywords
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # Wrap each line in quotes if not already quoted, then replace newlines with spaces
        PYPROJECT_KEYWORDS=$(sed 's/^[^"].*[^"]$/"&"/' <<EOF | tr '\n' ' '
        ${{ inputs.keywords }}
        EOF
        )
        echo "keywords in a line:"
        echo "$PYPROJECT_KEYWORDS"
        echo "PYPROJECT_KEYWORDS=$PYPROJECT_KEYWORDS" >> $GITHUB_ENV
      shell: bash

    - name: Build pyproject.toml + README.md (and commit)
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        set -e
        sudo apt-get update
        python -m venv action_venv
        . action_venv/bin/activate
        pip3 install -r ${{ github.action_path }}/requirements.txt

        # Build!
        set -x
        export PYPROJECT_KEYWORDS
        python3 ${{ github.action_path }}/pyproject_toml_builder.py \
          --toml pyproject.toml \
          --github-full-repo $GITHUB_REPOSITORY \
          --token ${{ github.token }} \
          --python-min "${{ inputs.python_min }}" \
          --python-max "${{ inputs.python_max }}" \
          --package-dirs ${{ inputs.package_dirs }} \
          --exclude-dirs ${{ inputs.exclude_dirs }} \
          --pypi-name "${{ inputs.pypi_name }}" \
          --patch-without-tag "${{ inputs.patch_without_tag }}" \
          --author "${{ inputs.author }}" \
          --author-email "${{ inputs.author_email }}"
        set +x
        
        # format (inc. sorting sections)
        pip install toml-sort
        toml-sort --in-place --ignore-case pyproject.toml
        
        cat pyproject.toml
        
        rm -rf action_venv
        
        # Commits
        git add pyproject.toml
        git commit -m "<bot> update pyproject.toml" || true
        git add README.md || true
        git commit -m "<bot> update README.md" || true
      shell: bash

    - name: Add py.typed file(s) (and commit)
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        python -c '
        import os, sys
        from pathlib import Path
        
        sys.path.append(os.path.abspath("${{ github.action_path }}"))
        from find_packages import iterate_dirnames
        
        for pkg_dname in iterate_dirnames(Path("."), "${{ inputs.exclude_dirs }}".split()):
          print(pkg_dname)
          fpath = Path(pkg_dname) / "py.typed"
          print(fpath)
          fpath.touch()  # create if needed!
        '
        git add .  # won't error if nothing to add
        git commit -m "<bot> add py.typed file(s)" || true
      shell: bash

    - name: Push changes
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        status=`git status 2>&1 | tee`
        ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
        if [ "$ahead" -eq "1" ]; then
          echo "no changes needed"
          exit 0
        fi
        git push
        echo "changes pushed"
      shell: bash
