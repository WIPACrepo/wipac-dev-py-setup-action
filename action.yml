name: 'WIPAC Dev Py Setup'
description: 'GitHub Action Package for Automating Python-Package Setup'

inputs:
  # REQUIRED
  python_min:
    description: 'Minimum required Python version'
    required: true  # needs to be explicitly checked
  # OPTIONAL (python)
  python_max:
    description: 'Maximum supported Python version. If not provided, the most recent Python version will be used.'
    required: false
    default: ''
  # OPTIONAL (packaging)
  package_dirs:
    description: "Space-separated list of directories to release. If not provided, all packages in the repository's root directory will be used."
    required: false
    default: ''
  exclude_dirs:
    description: "Space-separated list of directories to exclude from release, relative to the repository's root directory."
    required: false
    default: 'test tests doc docs resource resources example examples'
  # OPTIONAL (releases)
  pypi_name:
    description: 'Name of the PyPI package'
    required: false
    default: ''
  patch_without_tag:
    description: 'Whether to make a patch release even if the commit message does not explicitly warrant one'
    required: false
    default: 'True'
  # OPTIONAL (meta)
  keywords:
    description: 'Space-separated list of keywords'
    required: false
    default: ''
  author:
    description: 'Author of the package (required if the package is intended to be hosted on PyPI)'
    required: false
    default: ''
  author_email:
    description: 'Email of the package author (required if the package is intended to be hosted on PyPI)'
    required: false
    default: ''
  license:
    description: "Repository's license type"
    required: false
    default: 'MIT'
  # OPTIONAL (git)
  git_committer_name:
    description: 'Name used for "git config user.name"'
    required: false
    default: github-actions
  git_committer_email:
    description: 'Email used for "git config user.email"'
    required: false
    default: github-actions@github.com

# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}

runs:
  using: "composite"
  steps:
    - name: check required inputs
      run: |
        if [ -z "${{ inputs.python_min }}" ]; then
          echo "required input not provided: python_min"
          exit 1
        fi
      shell: bash

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # NOTE: update, someday. Also tests.yml

    - name: Is this most recent commit? It won't be if action was reran
      run: |
        git fetch &> /dev/null
        if [[ $(git status -sb | grep behind) ]]; then
          echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
          echo "this commit is not most recent on this branch -- rest of action will be skipped"
        fi
      shell: bash

    - name: check for deprecated features
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        if [[ -f setup.cfg ]]; then
          echo " "
          echo "WIPACrepo/wipac-dev-py-setup-action no longer supports 'setup.cfg'"
          echo "Migration Steps:"
          echo "  1. Manually move attributes from [wipac:cicd_setup_builder]"
          echo "     section to WIPACrepo/wipac-dev-py-setup-action's 'with' block."
          echo "     See https://github.com/WIPACrepo/wipac-dev-py-setup-action#inputs"
          echo "  2. Migrate any non-autogenerated configuration to 'pyproject.toml', "
          echo "     then delete 'setup.cfg'. If there is no non-autogenerated"
          echo "     configuration, simply delete 'setup.cfg'."
          echo "  3. Re-run this action!"
          exit 1
        fi
      shell: bash

    - name: Git config
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        git config user.name ${{ inputs.git_committer_name }}
        git config user.email ${{ inputs.git_committer_email }}
      shell: bash

    - name: Build pyproject.toml + README.md (and commit)
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        sudo apt-get update
        pip3 install -r ${{ github.action_path }}/requirements.txt

        echo $GITHUB_REPOSITORY
        echo "pyproject.toml (+ README.md)"
        # since GHA injects raw string, must use EOF to avoid quote-mangling
        HEAD_COMMIT_MESSAGE=$(cat <<EOF
        ${{ github.event.head_commit.message }}
        EOF
        )
        
        # Build!
        set -x
        # NOTE: when an arg is a list, don't quote it
        python3 ${{ github.action_path }}/pyproject_toml_builder.py \
          pyproject.toml \
          $GITHUB_REPOSITORY \
          --token ${{ github.token }} \
          --commit-message "$HEAD_COMMIT_MESSAGE" \
          --python-min "${{ inputs.python_min }}" \
          --package-dirs ${{ inputs.package_dirs }} \  
          --keywords ${{ inputs.keywords }} \ 
          --python-max "${{ inputs.python_max }}" \
          --exclude-dirs ${{ inputs.exclude_dirs }} \  
          --pypi-name "${{ inputs.pypi_name }}" \
          --patch-without-tag "${{ inputs.patch_without_tag }}" \
          --author "${{ inputs.author }}" \
          --author-email "${{ inputs.author_email }}" \
          --license "${{ inputs.license }}"
        set +x
        
        cat pyproject.toml
        # Commits
        git add pyproject.toml
        git commit -m "<bot> update pyproject.toml" || true
        git add README.md || true
        git commit -m "<bot> update README.md" || true
      shell: bash

    - name: Add py.typed file(s) (and commit)
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        python -c '
        import os
        from pathlib import Path

        line_to_parse = ""
        with open("setup.cfg") as f:
          for line in f.readlines():
            if line.startswith("version_variable = "):
              line_to_parse = line.strip()  # remove newline
        if not line_to_parse:
          raise Exception("Cannot addd py.typed files (missing version_variable in setup.cfg)")

        for version_path in line_to_parse.removeprefix("version_variable = ").split(","):
          print(version_path)
          dpath = version_path.removesuffix("__init__.py:__version__")
          print(dpath)
          fpath = Path(dpath) / "py.typed"
          print(fpath)
          fpath.touch()  # create if needed!
        '
        git add .  # won't error if nothing to add
        git commit -m "<bot> add py.typed file(s)" || true
      shell: bash

    - name: Push changes
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        status=`git status 2>&1 | tee`
        ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
        if [ "$ahead" -eq "1" ]; then
          echo "no changes needed"
          exit 0
        fi
        git push
        echo "changes pushed"
      shell: bash
